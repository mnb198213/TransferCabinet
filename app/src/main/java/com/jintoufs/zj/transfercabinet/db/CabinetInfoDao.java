package com.jintoufs.zj.transfercabinet.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CABINET_INFO".
*/
public class CabinetInfoDao extends AbstractDao<CabinetInfo, Long> {

    public static final String TABLENAME = "CABINET_INFO";

    /**
     * Properties of entity CabinetInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserIdCard = new Property(1, String.class, "userIdCard", false, "USERIDCARD");
        public final static Property Username = new Property(2, String.class, "username", false, "USERNAME");
        public final static Property Department = new Property(3, String.class, "department", false, "DEPARTMENT");
        public final static Property CabinetNumber = new Property(4, String.class, "cabinetNumber", false, "CABINETNUMBER");
        public final static Property PaperworkId = new Property(5, String.class, "paperworkId", false, "PAPERWORKID");
        public final static Property Type = new Property(6, String.class, "type", false, "TYPE");
        public final static Property State = new Property(7, String.class, "state", false, "STATE");
    };


    public CabinetInfoDao(DaoConfig config) {
        super(config);
    }
    
    public CabinetInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CABINET_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USERIDCARD\" TEXT," + // 1: userIdCard
                "\"USERNAME\" TEXT," + // 2: username
                "\"DEPARTMENT\" TEXT," + // 3: department
                "\"CABINETNUMBER\" TEXT," + // 4: cabinetNumber
                "\"PAPERWORKID\" TEXT," + // 5: paperworkId
                "\"TYPE\" TEXT," + // 6: type
                "\"STATE\" TEXT);"); // 7: state
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CABINET_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CabinetInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userIdCard = entity.getUserIdCard();
        if (userIdCard != null) {
            stmt.bindString(2, userIdCard);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(3, username);
        }
 
        String department = entity.getDepartment();
        if (department != null) {
            stmt.bindString(4, department);
        }
 
        String cabinetNumber = entity.getCabinetNumber();
        if (cabinetNumber != null) {
            stmt.bindString(5, cabinetNumber);
        }
 
        String paperworkId = entity.getPaperworkId();
        if (paperworkId != null) {
            stmt.bindString(6, paperworkId);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(7, type);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(8, state);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CabinetInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userIdCard = entity.getUserIdCard();
        if (userIdCard != null) {
            stmt.bindString(2, userIdCard);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(3, username);
        }
 
        String department = entity.getDepartment();
        if (department != null) {
            stmt.bindString(4, department);
        }
 
        String cabinetNumber = entity.getCabinetNumber();
        if (cabinetNumber != null) {
            stmt.bindString(5, cabinetNumber);
        }
 
        String paperworkId = entity.getPaperworkId();
        if (paperworkId != null) {
            stmt.bindString(6, paperworkId);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(7, type);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(8, state);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CabinetInfo readEntity(Cursor cursor, int offset) {
        CabinetInfo entity = new CabinetInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userIdCard
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // username
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // department
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // cabinetNumber
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // paperworkId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // type
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // state
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CabinetInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserIdCard(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUsername(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDepartment(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCabinetNumber(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPaperworkId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setState(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CabinetInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CabinetInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
